// This file is generated by rust-protobuf 2.8.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `rpc.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_0;

#[derive(PartialEq,Clone,Default)]
pub struct Task {
    // message fields
    pub source: ::protobuf::SingularPtrField<Source>,
    pub problem: ::protobuf::SingularPtrField<Problem>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Task {
    fn default() -> &'a Task {
        <Task as ::protobuf::Message>::default_instance()
    }
}

impl Task {
    pub fn new() -> Task {
        ::std::default::Default::default()
    }

    // .Source source = 1;


    pub fn get_source(&self) -> &Source {
        self.source.as_ref().unwrap_or_else(|| Source::default_instance())
    }
    pub fn clear_source(&mut self) {
        self.source.clear();
    }

    pub fn has_source(&self) -> bool {
        self.source.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source(&mut self, v: Source) {
        self.source = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source(&mut self) -> &mut Source {
        if self.source.is_none() {
            self.source.set_default();
        }
        self.source.as_mut().unwrap()
    }

    // Take field
    pub fn take_source(&mut self) -> Source {
        self.source.take().unwrap_or_else(|| Source::new())
    }

    // .Problem problem = 2;


    pub fn get_problem(&self) -> &Problem {
        self.problem.as_ref().unwrap_or_else(|| Problem::default_instance())
    }
    pub fn clear_problem(&mut self) {
        self.problem.clear();
    }

    pub fn has_problem(&self) -> bool {
        self.problem.is_some()
    }

    // Param is passed by value, moved
    pub fn set_problem(&mut self, v: Problem) {
        self.problem = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_problem(&mut self) -> &mut Problem {
        if self.problem.is_none() {
            self.problem.set_default();
        }
        self.problem.as_mut().unwrap()
    }

    // Take field
    pub fn take_problem(&mut self) -> Problem {
        self.problem.take().unwrap_or_else(|| Problem::new())
    }
}

impl ::protobuf::Message for Task {
    fn is_initialized(&self) -> bool {
        for v in &self.source {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.problem {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.source)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.problem)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.source.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.problem.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.source.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.problem.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Task {
        Task::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Source>>(
                    "source",
                    |m: &Task| { &m.source },
                    |m: &mut Task| { &mut m.source },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Problem>>(
                    "problem",
                    |m: &Task| { &m.problem },
                    |m: &mut Task| { &mut m.problem },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Task>(
                    "Task",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Task {
        static mut instance: ::protobuf::lazy::Lazy<Task> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Task,
        };
        unsafe {
            instance.get(Task::new)
        }
    }
}

impl ::protobuf::Clear for Task {
    fn clear(&mut self) {
        self.source.clear();
        self.problem.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Task {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Task {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Report {
    // message fields
    pub result: Report_Result,
    pub usage: ::protobuf::SingularPtrField<Resource>,
    pub message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Report {
    fn default() -> &'a Report {
        <Report as ::protobuf::Message>::default_instance()
    }
}

impl Report {
    pub fn new() -> Report {
        ::std::default::Default::default()
    }

    // .Report.Result result = 1;


    pub fn get_result(&self) -> Report_Result {
        self.result
    }
    pub fn clear_result(&mut self) {
        self.result = Report_Result::Accepted;
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: Report_Result) {
        self.result = v;
    }

    // .Resource usage = 2;


    pub fn get_usage(&self) -> &Resource {
        self.usage.as_ref().unwrap_or_else(|| Resource::default_instance())
    }
    pub fn clear_usage(&mut self) {
        self.usage.clear();
    }

    pub fn has_usage(&self) -> bool {
        self.usage.is_some()
    }

    // Param is passed by value, moved
    pub fn set_usage(&mut self, v: Resource) {
        self.usage = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_usage(&mut self) -> &mut Resource {
        if self.usage.is_none() {
            self.usage.set_default();
        }
        self.usage.as_mut().unwrap()
    }

    // Take field
    pub fn take_usage(&mut self) -> Resource {
        self.usage.take().unwrap_or_else(|| Resource::new())
    }

    // string message = 3;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Report {
    fn is_initialized(&self) -> bool {
        for v in &self.usage {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.result, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.usage)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.result != Report_Result::Accepted {
            my_size += ::protobuf::rt::enum_size(1, self.result);
        }
        if let Some(ref v) = self.usage.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.result != Report_Result::Accepted {
            os.write_enum(1, self.result.value())?;
        }
        if let Some(ref v) = self.usage.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.message.is_empty() {
            os.write_string(3, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Report {
        Report::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Report_Result>>(
                    "result",
                    |m: &Report| { &m.result },
                    |m: &mut Report| { &mut m.result },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Resource>>(
                    "usage",
                    |m: &Report| { &m.usage },
                    |m: &mut Report| { &mut m.usage },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "message",
                    |m: &Report| { &m.message },
                    |m: &mut Report| { &mut m.message },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Report>(
                    "Report",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Report {
        static mut instance: ::protobuf::lazy::Lazy<Report> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Report,
        };
        unsafe {
            instance.get(Report::new)
        }
    }
}

impl ::protobuf::Clear for Report {
    fn clear(&mut self) {
        self.result = Report_Result::Accepted;
        self.usage.clear();
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Report {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Report {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Report_Result {
    Accepted = 0,
    WrongAnswer = 1,
    TimeLimitExceeded = 2,
    MemoryLimitExceeded = 3,
    RuntimeError = 4,
    CompileError = 5,
    SystemError = 6,
}

impl ::protobuf::ProtobufEnum for Report_Result {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Report_Result> {
        match value {
            0 => ::std::option::Option::Some(Report_Result::Accepted),
            1 => ::std::option::Option::Some(Report_Result::WrongAnswer),
            2 => ::std::option::Option::Some(Report_Result::TimeLimitExceeded),
            3 => ::std::option::Option::Some(Report_Result::MemoryLimitExceeded),
            4 => ::std::option::Option::Some(Report_Result::RuntimeError),
            5 => ::std::option::Option::Some(Report_Result::CompileError),
            6 => ::std::option::Option::Some(Report_Result::SystemError),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Report_Result] = &[
            Report_Result::Accepted,
            Report_Result::WrongAnswer,
            Report_Result::TimeLimitExceeded,
            Report_Result::MemoryLimitExceeded,
            Report_Result::RuntimeError,
            Report_Result::CompileError,
            Report_Result::SystemError,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Report_Result", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Report_Result {
}

impl ::std::default::Default for Report_Result {
    fn default() -> Self {
        Report_Result::Accepted
    }
}

impl ::protobuf::reflect::ProtobufValue for Report_Result {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Problem {
    // message oneof groups
    pub problem: ::std::option::Option<Problem_oneof_problem>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Problem {
    fn default() -> &'a Problem {
        <Problem as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Problem_oneof_problem {
    normal(NormalProblem),
    special(SpecialProblem),
}

impl Problem {
    pub fn new() -> Problem {
        ::std::default::Default::default()
    }

    // .NormalProblem normal = 1;


    pub fn get_normal(&self) -> &NormalProblem {
        match self.problem {
            ::std::option::Option::Some(Problem_oneof_problem::normal(ref v)) => v,
            _ => NormalProblem::default_instance(),
        }
    }
    pub fn clear_normal(&mut self) {
        self.problem = ::std::option::Option::None;
    }

    pub fn has_normal(&self) -> bool {
        match self.problem {
            ::std::option::Option::Some(Problem_oneof_problem::normal(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_normal(&mut self, v: NormalProblem) {
        self.problem = ::std::option::Option::Some(Problem_oneof_problem::normal(v))
    }

    // Mutable pointer to the field.
    pub fn mut_normal(&mut self) -> &mut NormalProblem {
        if let ::std::option::Option::Some(Problem_oneof_problem::normal(_)) = self.problem {
        } else {
            self.problem = ::std::option::Option::Some(Problem_oneof_problem::normal(NormalProblem::new()));
        }
        match self.problem {
            ::std::option::Option::Some(Problem_oneof_problem::normal(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_normal(&mut self) -> NormalProblem {
        if self.has_normal() {
            match self.problem.take() {
                ::std::option::Option::Some(Problem_oneof_problem::normal(v)) => v,
                _ => panic!(),
            }
        } else {
            NormalProblem::new()
        }
    }

    // .SpecialProblem special = 2;


    pub fn get_special(&self) -> &SpecialProblem {
        match self.problem {
            ::std::option::Option::Some(Problem_oneof_problem::special(ref v)) => v,
            _ => SpecialProblem::default_instance(),
        }
    }
    pub fn clear_special(&mut self) {
        self.problem = ::std::option::Option::None;
    }

    pub fn has_special(&self) -> bool {
        match self.problem {
            ::std::option::Option::Some(Problem_oneof_problem::special(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_special(&mut self, v: SpecialProblem) {
        self.problem = ::std::option::Option::Some(Problem_oneof_problem::special(v))
    }

    // Mutable pointer to the field.
    pub fn mut_special(&mut self) -> &mut SpecialProblem {
        if let ::std::option::Option::Some(Problem_oneof_problem::special(_)) = self.problem {
        } else {
            self.problem = ::std::option::Option::Some(Problem_oneof_problem::special(SpecialProblem::new()));
        }
        match self.problem {
            ::std::option::Option::Some(Problem_oneof_problem::special(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_special(&mut self) -> SpecialProblem {
        if self.has_special() {
            match self.problem.take() {
                ::std::option::Option::Some(Problem_oneof_problem::special(v)) => v,
                _ => panic!(),
            }
        } else {
            SpecialProblem::new()
        }
    }
}

impl ::protobuf::Message for Problem {
    fn is_initialized(&self) -> bool {
        if let Some(Problem_oneof_problem::normal(ref v)) = self.problem {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Problem_oneof_problem::special(ref v)) = self.problem {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.problem = ::std::option::Option::Some(Problem_oneof_problem::normal(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.problem = ::std::option::Option::Some(Problem_oneof_problem::special(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.problem {
            match v {
                &Problem_oneof_problem::normal(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Problem_oneof_problem::special(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.problem {
            match v {
                &Problem_oneof_problem::normal(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Problem_oneof_problem::special(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Problem {
        Problem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, NormalProblem>(
                    "normal",
                    Problem::has_normal,
                    Problem::get_normal,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SpecialProblem>(
                    "special",
                    Problem::has_special,
                    Problem::get_special,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Problem>(
                    "Problem",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Problem {
        static mut instance: ::protobuf::lazy::Lazy<Problem> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Problem,
        };
        unsafe {
            instance.get(Problem::new)
        }
    }
}

impl ::protobuf::Clear for Problem {
    fn clear(&mut self) {
        self.problem = ::std::option::Option::None;
        self.problem = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Problem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Problem {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NormalProblem {
    // message fields
    pub limit: ::protobuf::SingularPtrField<Resource>,
    pub cases: ::protobuf::RepeatedField<TestCase>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NormalProblem {
    fn default() -> &'a NormalProblem {
        <NormalProblem as ::protobuf::Message>::default_instance()
    }
}

impl NormalProblem {
    pub fn new() -> NormalProblem {
        ::std::default::Default::default()
    }

    // .Resource limit = 1;


    pub fn get_limit(&self) -> &Resource {
        self.limit.as_ref().unwrap_or_else(|| Resource::default_instance())
    }
    pub fn clear_limit(&mut self) {
        self.limit.clear();
    }

    pub fn has_limit(&self) -> bool {
        self.limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: Resource) {
        self.limit = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_limit(&mut self) -> &mut Resource {
        if self.limit.is_none() {
            self.limit.set_default();
        }
        self.limit.as_mut().unwrap()
    }

    // Take field
    pub fn take_limit(&mut self) -> Resource {
        self.limit.take().unwrap_or_else(|| Resource::new())
    }

    // repeated .TestCase cases = 2;


    pub fn get_cases(&self) -> &[TestCase] {
        &self.cases
    }
    pub fn clear_cases(&mut self) {
        self.cases.clear();
    }

    // Param is passed by value, moved
    pub fn set_cases(&mut self, v: ::protobuf::RepeatedField<TestCase>) {
        self.cases = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cases(&mut self) -> &mut ::protobuf::RepeatedField<TestCase> {
        &mut self.cases
    }

    // Take field
    pub fn take_cases(&mut self) -> ::protobuf::RepeatedField<TestCase> {
        ::std::mem::replace(&mut self.cases, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for NormalProblem {
    fn is_initialized(&self) -> bool {
        for v in &self.limit {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.cases {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.limit)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cases)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.limit.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.cases {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.limit.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.cases {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NormalProblem {
        NormalProblem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Resource>>(
                    "limit",
                    |m: &NormalProblem| { &m.limit },
                    |m: &mut NormalProblem| { &mut m.limit },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TestCase>>(
                    "cases",
                    |m: &NormalProblem| { &m.cases },
                    |m: &mut NormalProblem| { &mut m.cases },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NormalProblem>(
                    "NormalProblem",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NormalProblem {
        static mut instance: ::protobuf::lazy::Lazy<NormalProblem> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NormalProblem,
        };
        unsafe {
            instance.get(NormalProblem::new)
        }
    }
}

impl ::protobuf::Clear for NormalProblem {
    fn clear(&mut self) {
        self.limit.clear();
        self.cases.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NormalProblem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NormalProblem {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SpecialProblem {
    // message fields
    pub limit: ::protobuf::SingularPtrField<Resource>,
    pub cases: ::protobuf::RepeatedField<TestCase>,
    pub spj: ::protobuf::SingularPtrField<Source>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SpecialProblem {
    fn default() -> &'a SpecialProblem {
        <SpecialProblem as ::protobuf::Message>::default_instance()
    }
}

impl SpecialProblem {
    pub fn new() -> SpecialProblem {
        ::std::default::Default::default()
    }

    // .Resource limit = 1;


    pub fn get_limit(&self) -> &Resource {
        self.limit.as_ref().unwrap_or_else(|| Resource::default_instance())
    }
    pub fn clear_limit(&mut self) {
        self.limit.clear();
    }

    pub fn has_limit(&self) -> bool {
        self.limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: Resource) {
        self.limit = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_limit(&mut self) -> &mut Resource {
        if self.limit.is_none() {
            self.limit.set_default();
        }
        self.limit.as_mut().unwrap()
    }

    // Take field
    pub fn take_limit(&mut self) -> Resource {
        self.limit.take().unwrap_or_else(|| Resource::new())
    }

    // repeated .TestCase cases = 2;


    pub fn get_cases(&self) -> &[TestCase] {
        &self.cases
    }
    pub fn clear_cases(&mut self) {
        self.cases.clear();
    }

    // Param is passed by value, moved
    pub fn set_cases(&mut self, v: ::protobuf::RepeatedField<TestCase>) {
        self.cases = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cases(&mut self) -> &mut ::protobuf::RepeatedField<TestCase> {
        &mut self.cases
    }

    // Take field
    pub fn take_cases(&mut self) -> ::protobuf::RepeatedField<TestCase> {
        ::std::mem::replace(&mut self.cases, ::protobuf::RepeatedField::new())
    }

    // .Source spj = 3;


    pub fn get_spj(&self) -> &Source {
        self.spj.as_ref().unwrap_or_else(|| Source::default_instance())
    }
    pub fn clear_spj(&mut self) {
        self.spj.clear();
    }

    pub fn has_spj(&self) -> bool {
        self.spj.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spj(&mut self, v: Source) {
        self.spj = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spj(&mut self) -> &mut Source {
        if self.spj.is_none() {
            self.spj.set_default();
        }
        self.spj.as_mut().unwrap()
    }

    // Take field
    pub fn take_spj(&mut self) -> Source {
        self.spj.take().unwrap_or_else(|| Source::new())
    }
}

impl ::protobuf::Message for SpecialProblem {
    fn is_initialized(&self) -> bool {
        for v in &self.limit {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.cases {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.spj {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.limit)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cases)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.spj)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.limit.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.cases {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.spj.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.limit.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.cases {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.spj.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SpecialProblem {
        SpecialProblem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Resource>>(
                    "limit",
                    |m: &SpecialProblem| { &m.limit },
                    |m: &mut SpecialProblem| { &mut m.limit },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TestCase>>(
                    "cases",
                    |m: &SpecialProblem| { &m.cases },
                    |m: &mut SpecialProblem| { &mut m.cases },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Source>>(
                    "spj",
                    |m: &SpecialProblem| { &m.spj },
                    |m: &mut SpecialProblem| { &mut m.spj },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SpecialProblem>(
                    "SpecialProblem",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SpecialProblem {
        static mut instance: ::protobuf::lazy::Lazy<SpecialProblem> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SpecialProblem,
        };
        unsafe {
            instance.get(SpecialProblem::new)
        }
    }
}

impl ::protobuf::Clear for SpecialProblem {
    fn clear(&mut self) {
        self.limit.clear();
        self.cases.clear();
        self.spj.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SpecialProblem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SpecialProblem {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TestCase {
    // message fields
    pub input: ::std::string::String,
    pub answer: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TestCase {
    fn default() -> &'a TestCase {
        <TestCase as ::protobuf::Message>::default_instance()
    }
}

impl TestCase {
    pub fn new() -> TestCase {
        ::std::default::Default::default()
    }

    // string input = 1;


    pub fn get_input(&self) -> &str {
        &self.input
    }
    pub fn clear_input(&mut self) {
        self.input.clear();
    }

    // Param is passed by value, moved
    pub fn set_input(&mut self, v: ::std::string::String) {
        self.input = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_input(&mut self) -> &mut ::std::string::String {
        &mut self.input
    }

    // Take field
    pub fn take_input(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.input, ::std::string::String::new())
    }

    // string answer = 2;


    pub fn get_answer(&self) -> &str {
        &self.answer
    }
    pub fn clear_answer(&mut self) {
        self.answer.clear();
    }

    // Param is passed by value, moved
    pub fn set_answer(&mut self, v: ::std::string::String) {
        self.answer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_answer(&mut self) -> &mut ::std::string::String {
        &mut self.answer
    }

    // Take field
    pub fn take_answer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.answer, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TestCase {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.input)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.answer)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.input.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.input);
        }
        if !self.answer.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.answer);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.input.is_empty() {
            os.write_string(1, &self.input)?;
        }
        if !self.answer.is_empty() {
            os.write_string(2, &self.answer)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TestCase {
        TestCase::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "input",
                    |m: &TestCase| { &m.input },
                    |m: &mut TestCase| { &mut m.input },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "answer",
                    |m: &TestCase| { &m.answer },
                    |m: &mut TestCase| { &mut m.answer },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TestCase>(
                    "TestCase",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TestCase {
        static mut instance: ::protobuf::lazy::Lazy<TestCase> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TestCase,
        };
        unsafe {
            instance.get(TestCase::new)
        }
    }
}

impl ::protobuf::Clear for TestCase {
    fn clear(&mut self) {
        self.input.clear();
        self.answer.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TestCase {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TestCase {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Source {
    // message fields
    pub language: ::std::string::String,
    pub code: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Source {
    fn default() -> &'a Source {
        <Source as ::protobuf::Message>::default_instance()
    }
}

impl Source {
    pub fn new() -> Source {
        ::std::default::Default::default()
    }

    // string language = 1;


    pub fn get_language(&self) -> &str {
        &self.language
    }
    pub fn clear_language(&mut self) {
        self.language.clear();
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        &mut self.language
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.language, ::std::string::String::new())
    }

    // string code = 2;


    pub fn get_code(&self) -> &str {
        &self.code
    }
    pub fn clear_code(&mut self) {
        self.code.clear();
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: ::std::string::String) {
        self.code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_code(&mut self) -> &mut ::std::string::String {
        &mut self.code
    }

    // Take field
    pub fn take_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.code, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Source {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.language)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.code)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.language.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.language);
        }
        if !self.code.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.code);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.language.is_empty() {
            os.write_string(1, &self.language)?;
        }
        if !self.code.is_empty() {
            os.write_string(2, &self.code)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Source {
        Source::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "language",
                    |m: &Source| { &m.language },
                    |m: &mut Source| { &mut m.language },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "code",
                    |m: &Source| { &m.code },
                    |m: &mut Source| { &mut m.code },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Source>(
                    "Source",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Source {
        static mut instance: ::protobuf::lazy::Lazy<Source> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Source,
        };
        unsafe {
            instance.get(Source::new)
        }
    }
}

impl ::protobuf::Clear for Source {
    fn clear(&mut self) {
        self.language.clear();
        self.code.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Source {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Source {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Resource {
    // message fields
    pub real_time: u64,
    pub cpu_time: u64,
    pub memory: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Resource {
    fn default() -> &'a Resource {
        <Resource as ::protobuf::Message>::default_instance()
    }
}

impl Resource {
    pub fn new() -> Resource {
        ::std::default::Default::default()
    }

    // uint64 real_time = 1;


    pub fn get_real_time(&self) -> u64 {
        self.real_time
    }
    pub fn clear_real_time(&mut self) {
        self.real_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_real_time(&mut self, v: u64) {
        self.real_time = v;
    }

    // uint64 cpu_time = 2;


    pub fn get_cpu_time(&self) -> u64 {
        self.cpu_time
    }
    pub fn clear_cpu_time(&mut self) {
        self.cpu_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_cpu_time(&mut self, v: u64) {
        self.cpu_time = v;
    }

    // uint64 memory = 3;


    pub fn get_memory(&self) -> u64 {
        self.memory
    }
    pub fn clear_memory(&mut self) {
        self.memory = 0;
    }

    // Param is passed by value, moved
    pub fn set_memory(&mut self, v: u64) {
        self.memory = v;
    }
}

impl ::protobuf::Message for Resource {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.real_time = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.cpu_time = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.memory = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.real_time != 0 {
            my_size += ::protobuf::rt::value_size(1, self.real_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cpu_time != 0 {
            my_size += ::protobuf::rt::value_size(2, self.cpu_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.memory != 0 {
            my_size += ::protobuf::rt::value_size(3, self.memory, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.real_time != 0 {
            os.write_uint64(1, self.real_time)?;
        }
        if self.cpu_time != 0 {
            os.write_uint64(2, self.cpu_time)?;
        }
        if self.memory != 0 {
            os.write_uint64(3, self.memory)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Resource {
        Resource::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "real_time",
                    |m: &Resource| { &m.real_time },
                    |m: &mut Resource| { &mut m.real_time },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "cpu_time",
                    |m: &Resource| { &m.cpu_time },
                    |m: &mut Resource| { &mut m.cpu_time },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "memory",
                    |m: &Resource| { &m.memory },
                    |m: &mut Resource| { &mut m.memory },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Resource>(
                    "Resource",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Resource {
        static mut instance: ::protobuf::lazy::Lazy<Resource> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Resource,
        };
        unsafe {
            instance.get(Resource::new)
        }
    }
}

impl ::protobuf::Clear for Resource {
    fn clear(&mut self) {
        self.real_time = 0;
        self.cpu_time = 0;
        self.memory = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Resource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Resource {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\trpc.proto\"K\n\x04Task\x12\x1f\n\x06source\x18\x01\x20\x01(\x0b2\x07\
    .SourceR\x06source\x12\"\n\x07problem\x18\x02\x20\x01(\x0b2\x08.ProblemR\
    \x07problem\"\xfa\x01\n\x06Report\x12&\n\x06result\x18\x01\x20\x01(\x0e2\
    \x0e.Report.ResultR\x06result\x12\x1f\n\x05usage\x18\x02\x20\x01(\x0b2\t\
    .ResourceR\x05usage\x12\x18\n\x07message\x18\x03\x20\x01(\tR\x07message\
    \"\x8c\x01\n\x06Result\x12\x0c\n\x08Accepted\x10\0\x12\x0f\n\x0bWrongAns\
    wer\x10\x01\x12\x15\n\x11TimeLimitExceeded\x10\x02\x12\x17\n\x13MemoryLi\
    mitExceeded\x10\x03\x12\x10\n\x0cRuntimeError\x10\x04\x12\x10\n\x0cCompi\
    leError\x10\x05\x12\x0f\n\x0bSystemError\x10\x06\"k\n\x07Problem\x12(\n\
    \x06normal\x18\x01\x20\x01(\x0b2\x0e.NormalProblemH\0R\x06normal\x12+\n\
    \x07special\x18\x02\x20\x01(\x0b2\x0f.SpecialProblemH\0R\x07specialB\t\n\
    \x07problem\"Q\n\rNormalProblem\x12\x1f\n\x05limit\x18\x01\x20\x01(\x0b2\
    \t.ResourceR\x05limit\x12\x1f\n\x05cases\x18\x02\x20\x03(\x0b2\t.TestCas\
    eR\x05cases\"m\n\x0eSpecialProblem\x12\x1f\n\x05limit\x18\x01\x20\x01(\
    \x0b2\t.ResourceR\x05limit\x12\x1f\n\x05cases\x18\x02\x20\x03(\x0b2\t.Te\
    stCaseR\x05cases\x12\x19\n\x03spj\x18\x03\x20\x01(\x0b2\x07.SourceR\x03s\
    pj\"8\n\x08TestCase\x12\x14\n\x05input\x18\x01\x20\x01(\tR\x05input\x12\
    \x16\n\x06answer\x18\x02\x20\x01(\tR\x06answer\"8\n\x06Source\x12\x1a\n\
    \x08language\x18\x01\x20\x01(\tR\x08language\x12\x12\n\x04code\x18\x02\
    \x20\x01(\tR\x04code\"Z\n\x08Resource\x12\x1b\n\treal_time\x18\x01\x20\
    \x01(\x04R\x08realTime\x12\x19\n\x08cpu_time\x18\x02\x20\x01(\x04R\x07cp\
    uTime\x12\x16\n\x06memory\x18\x03\x20\x01(\x04R\x06memory2\"\n\x03Ana\
    \x12\x1b\n\x05judge\x12\x05.Task\x1a\x07.Report\"\00\x01b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
